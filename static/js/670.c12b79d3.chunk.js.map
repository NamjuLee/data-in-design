{"version":3,"file":"static/js/670.c12b79d3.chunk.js","mappings":"uKAIO,MAAMA,UAAiBC,EAAAA,kBAE1BC,WAAAA,CAAYC,GACVC,MAAMD,EACR,CACOE,IAAAA,GAELC,KAAKC,EAAI,EACTD,KAAKE,IAAIC,QAAQC,IAEnB,CACOC,MAAAA,GAEL,IAAK,IAAIC,EAAI,EAAGA,EAAIN,KAAKE,IAAIK,SAAUD,EACrCN,KAAKE,IAAII,GAAGE,EAAIC,KAAKC,IAAIJ,EAAIN,KAAKC,EAAI,IAGxCD,KAAKC,GAAK,GACZ,EAIF,MAAMU,EAMJf,WAAAA,CAAYgB,EAAGC,EAAGL,GAAI,KALfI,EAAY,EAAI,KAChBC,EAAY,EAAI,KAChBL,EAAY,EAAI,KAChBM,EAAY,GAAE,KACdC,MAAQ,OAEXf,KAAKY,EAAIA,EACTZ,KAAKa,EAAIA,EACTb,KAAKQ,EAAIA,CACb,CACOQ,MAAAA,CAAOC,GACVA,EAAIC,UAAYlB,KAAKe,MACrBE,EAAIE,YACJF,EAAIG,IAAIpB,KAAKY,EAAGZ,KAAKa,EAAGb,KAAKc,EAAG,EAAa,EAAVL,KAAKY,IACxCJ,EAAIK,YACJL,EAAIM,MACR,EAIF,MAcMnB,EAAY,WAAoB,IAAnBoB,EAASC,UAAAlB,OAAA,QAAAmB,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7B,MACMvB,EAAM,GACZ,IAAK,IAAIyB,GAAKH,EAAWG,EAAIH,EAAWG,IACtC,IAAK,IAAIrB,GAAKkB,EAAWlB,EAAIkB,EAAWlB,IAAK,CAM3C,MAAMsB,EAAI,IAAIjB,EATJ,GASYL,EATZ,GASuBqB,EAAW,GAC5CzB,EAAIC,KAAKyB,EACX,CAEF,OAAO1B,CACT,C","sources":["CLASS_03_Vector_Point/Project_02_vec/index.ts"],"sourcesContent":["import {  } from '../../lib'\r\nimport { RendererWireframe } from 'njscore';\r\n\r\n\r\nexport class Solution extends RendererWireframe {\r\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\r\n    constructor(id: string) {\r\n      super(id)\r\n    }\r\n    public init () {\r\n  \r\n      this.t = 0.0;\r\n      this.pts.push(...genGridPt());\r\n  \r\n    }\r\n    public update() {\r\n  \r\n      for (let i = 0; i < this.pts.length; ++i) {\r\n        this.pts[i].z = Math.cos(i * this.t * 0.1)\r\n      }\r\n  \r\n      this.t += 0.01;\r\n    }\r\n  \r\n  }\r\n  \r\n  class Vector3 {\r\n    public x: number = 0.0;\r\n    public y: number = 0.0;\r\n    public z: number = 0.0;\r\n    public r: number = 10\r\n    public color = '#f0f'\r\n    constructor(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D) {\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, this.r, 0, Math.PI * 2.0);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n  }\r\n  \r\n  \r\n  const genRandomPt = (numPoints = 100) => {\r\n    const pts = [];\r\n    for (let i = 0; i < numPoints; i++) {\r\n      // const p = {\r\n      //   x: (Math.random() - 0.5) * 500,\r\n      //   y: (Math.random() - 0.5) * 500,\r\n      //   z: (Math.random() - 0.5) * 500,\r\n      // }\r\n      const p = new Vector3((Math.random() - 0.5) * 500, (Math.random() - 0.5) * 500, (Math.random() - 0.5) * 500)\r\n      pts.push(p);\r\n    }\r\n    return pts;\r\n  };\r\n  \r\n  const genGridPt = (numPoints = 5) => {\r\n    const scale = 20;\r\n    const pts = [];\r\n    for (let j = -numPoints; j < numPoints; j++) {\r\n      for (let i = -numPoints; i < numPoints; i++) {\r\n        // pts.push({\r\n        //   x: i * scale,\r\n        //   y: j * scale,\r\n        //   z: 0.0,\r\n        // });\r\n        const p = new Vector3(i * scale, j * scale, 0.0)\r\n        pts.push(p);\r\n      }\r\n    }\r\n    return pts;\r\n  };\r\n  "],"names":["Solution","RendererWireframe","constructor","id","super","init","this","t","pts","push","genGridPt","update","i","length","z","Math","cos","Vector3","x","y","r","color","render","ctx","fillStyle","beginPath","arc","PI","closePath","fill","numPoints","arguments","undefined","j","p"],"sourceRoot":""}