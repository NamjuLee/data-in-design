{"version":3,"file":"static/js/9840.4af1fb78.chunk.js","mappings":"0KAGO,MAAMA,UAAiBC,EAAAA,cAQ1BC,WAAAA,CAAYC,GACRC,MAAMD,GAAM,KAPhBE,IAAkB,GAAG,KAErBC,OAAqB,GAAG,KACxBC,QAAsB,GAAG,KACzBC,OAAqB,IAKjBC,EAAAA,EAAAA,gBAAe,mGAAmGC,MAAMC,IACpH,IAAK,IAAIC,EAAI,EAAIA,EAAID,EAAW,QAAEE,SAAUD,EAEV,eAA1BD,EAAW,QAAEC,GAAO,GACtBD,EAAW,QAAEC,GAAGE,KAAKC,SAAUC,IACzBC,KAAKX,OAAOY,KAAK,CAACF,EAAS,IAAGA,EAAS,KAAG,IAEb,eAA1BL,EAAW,QAAEC,GAAO,GAC3BD,EAAW,QAAEC,GAAGE,KAAKC,SAAUC,IACzBC,KAAKV,QAAQW,KAAK,CAACF,EAAS,IAAGA,EAAS,KAAG,IAEhB,YAA1BL,EAAW,QAAEC,GAAO,IAC3BD,EAAW,QAAEC,GAAGE,KAAKC,SAAUC,IACzBC,KAAKT,OAAOU,KAAK,CAACF,EAAS,IAAGA,EAAS,KAAG,GAIxD,IAGJC,KAAKE,OACT,CACAC,MAAAA,CAAOC,GACHA,EAAIC,yBAA2B,SAC/B,IAAK,IAAIV,EAAI,EAAGA,EAAIK,KAAKX,OAAOO,SAAUD,EAAG,CACzC,MAAMW,EAAYN,KAAKO,SAASP,KAAKX,OAAOM,GAAG,GAAIK,KAAKX,OAAOM,GAAG,IAClEa,EAAYJ,EAAKE,EAAU,GAAIA,EAAU,GAAIN,KAAKS,KAAM,uBAC5D,CACA,IAAK,IAAId,EAAI,EAAGA,EAAIK,KAAKV,QAAQM,SAAUD,EAAG,CAC1C,MAAMW,EAAYN,KAAKO,SAASP,KAAKV,QAAQK,GAAG,GAAIK,KAAKV,QAAQK,GAAG,IACpEa,EAAYJ,EAAKE,EAAU,GAAIA,EAAU,GAAIN,KAAKS,KAAO,EAAG,uBAChE,CACA,IAAK,IAAId,EAAI,EAAGA,EAAIK,KAAKT,OAAOK,SAAUD,EAAG,CACzC,MAAMW,EAAYN,KAAKO,SAASP,KAAKT,OAAOI,GAAG,GAAIK,KAAKT,OAAOI,GAAG,IAClEa,EAAYJ,EAAKE,EAAU,GAAIA,EAAU,GAAIN,KAAKS,KAAO,EAAG,uBAChE,CACA,IAAK,IAAId,EAAI,EAAGA,EAAIK,KAAKZ,IAAIQ,SAAUD,EAAG,CACtC,MAAMW,EAAYN,KAAKO,SAASP,KAAKZ,IAAIO,GAAG,GAAIK,KAAKZ,IAAIO,GAAG,IAC5Da,EAAYJ,EAAKE,EAAU,GAAIA,EAAU,GAAIN,KAAKS,KAAO,EAAG,2BAChE,CAEJ,CACAC,OAAAA,CAAQC,GACJ,CAEJC,SAAAA,CAAUC,EAAWC,GACjB,CAEJC,OAAAA,CAAQF,EAAWC,GACf,CAEJE,UAAAA,CAAWH,EAAWC,GAClB,MAAMG,EAAejB,KAAKkB,MAAML,EAAGC,GACnCd,KAAKZ,IAAIa,KAAKgB,EAClB,CACAE,SAAAA,CAAUN,EAAWC,GAErB,EAGJ,MAAMN,EAAcA,CAACJ,EAA+BS,EAAWC,EAAWM,EAAWC,KACjFjB,EAAIkB,UAAYD,EAChBjB,EAAImB,YACJnB,EAAIoB,IAAIX,EAAGC,EAA6B,GAAzBW,KAAKC,IAAQ,GAAJN,GAAW,GAAQ,EAAa,EAAVK,KAAKE,IACnDvB,EAAIwB,YACJxB,EAAIyB,MAAM,C","sources":["PART_08_Third_Place_Prediction_Implementation/Project_01_Third_Place/index.ts"],"sourcesContent":["import { RendererJSAPI } from '../../lib'\r\nimport { getJSONFromURL } from 'njscore';\r\n\r\nexport class Solution extends RendererJSAPI {\r\n\r\n    pts: number[][] = [];\r\n\r\n    ptsUni: number[][] = [];\r\n    ptsBook: number[][] = [];\r\n    ptsLib: number[][] = [];\r\n\r\n    constructor(view: any) {\r\n        super(view);\r\n\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Boston/thrid-place/ThridPlaceBoston.json').then((d) => {\r\n            for (let i = 0 ; i < d['dataset'].length; ++i) {\r\n                // console.log(d['dataset'][i]['id'])\r\n                if (d['dataset'][i]['id'] === 'university') {\r\n                  d['dataset'][i].data.forEach( (pos: any) => {\r\n                        this.ptsUni.push([pos['lon'], pos['lat']]);\r\n                  });\r\n                } else if (d['dataset'][i]['id'] === 'book_store') {\r\n                    d['dataset'][i].data.forEach( (pos: any) => {\r\n                          this.ptsBook.push([pos['lon'], pos['lat']]);\r\n                    });\r\n                } else if (d['dataset'][i]['id'] === 'library') {\r\n                    d['dataset'][i].data.forEach( (pos: any) => {\r\n                          this.ptsLib.push([pos['lon'], pos['lat']]);\r\n                    });\r\n                } \r\n\r\n            }\r\n        });\r\n        \r\n        this.start();\r\n    }\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        ctx.globalCompositeOperation = 'screen' ; //'lighten';\r\n        for (let i = 0; i < this.ptsUni.length; ++i) { \r\n            const projected = this.toScreen(this.ptsUni[i][0], this.ptsUni[i][1]); \r\n            renderPoint(ctx, projected[0], projected[1], this.time, 'rgba(0, 255, 0, 0.6)' );\r\n        }\r\n        for (let i = 0; i < this.ptsBook.length; ++i) { \r\n            const projected = this.toScreen(this.ptsBook[i][0], this.ptsBook[i][1]); \r\n            renderPoint(ctx, projected[0], projected[1], this.time + 1, 'rgba(0, 0, 255, 0.6)' );\r\n        }\r\n        for (let i = 0; i < this.ptsLib.length; ++i) { \r\n            const projected = this.toScreen(this.ptsLib[i][0], this.ptsLib[i][1]); \r\n            renderPoint(ctx, projected[0], projected[1], this.time + 2, 'rgba(255, 0, 0, 0.6)' );\r\n        }\r\n        for (let i = 0; i < this.pts.length; ++i) { \r\n            const projected = this.toScreen(this.pts[i][0], this.pts[i][1]); \r\n            renderPoint(ctx, projected[0], projected[1], this.time + 3, 'rgba(255, 255, 255, 0.6)' );\r\n        }\r\n\r\n    }\r\n    keyDown(k: KeyboardEvent): void {\r\n        // console.log('key pressed', k);\r\n    }\r\n    mouseDown(x: number, y: number): void {\r\n        // console.log('mouse down')\r\n    }\r\n    mouseUp(x: number, y: number): void {\r\n        // console.log('mouse up')\r\n    }\r\n    mouseClick(x: number, y: number): void {\r\n        const mapProjected = this.toMap(x, y);\r\n        this.pts.push(mapProjected);\r\n    }\r\n    mouseMove(x: number, y: number) {\r\n\r\n    }\r\n}\r\n\r\nconst renderPoint = (ctx: CanvasRenderingContext2D, x: number, y: number, t: number, color: string) => {\r\n    ctx.fillStyle = color;\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, (Math.sin(t * 0.8) + 4) * 2, 0, Math.PI * 2);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n}\r\n"],"names":["Solution","RendererJSAPI","constructor","view","super","pts","ptsUni","ptsBook","ptsLib","getJSONFromURL","then","d","i","length","data","forEach","pos","this","push","start","render","ctx","globalCompositeOperation","projected","toScreen","renderPoint","time","keyDown","k","mouseDown","x","y","mouseUp","mouseClick","mapProjected","toMap","mouseMove","t","color","fillStyle","beginPath","arc","Math","sin","PI","closePath","fill"],"sourceRoot":""}