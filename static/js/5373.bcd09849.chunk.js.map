{"version":3,"file":"static/js/5373.bcd09849.chunk.js","mappings":"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","sources":["PART_10_Web_Visualization_Digital_Mapping_Analysis/UrbanNetwork/01_Interaction.ts","PART_10_Web_Visualization_Digital_Mapping_Analysis/UrbanNetwork/02_Network.ts"],"sourcesContent":["import { distanceTo, RendererJSAPI } from 'njscore';\r\n\r\nexport class Solution extends RendererJSAPI {\r\n\r\n    pts: Point[] = [];\r\n    lns: Line[] = [];\r\n\r\n    path: any;\r\n\r\n    previousPt: Point | undefined = undefined;\r\n\r\n    ptStart: InteractivePoint;\r\n    ptEnd: InteractivePoint;\r\n    captured: InteractivePoint | undefined = undefined;\r\n\r\n    constructor(view: any) {\r\n        super(view);\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        // disable interaction with a base map\r\n        // https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html\r\n        this.mView.on(\"drag\", (event) => {\r\n            event.stopPropagation();\r\n        });\r\n        this.mView.navigation.mouseWheelZoomEnabled = false;\r\n        this.center(-71.102761, 42.366946);\r\n        this.zoom(15)\r\n\r\n\r\n        this.ptStart = new InteractivePoint(315, 90);\r\n        this.ptEnd = new InteractivePoint(800, 800);\r\n\r\n        // !! you should execute it for rendering\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n\r\n\r\n        this.lns.map( (l: Line) => {\r\n            return l.render(ctx, this.time);\r\n        });\r\n        this.pts.map( (p: Point) => {\r\n            return  p.render(ctx, this.time);\r\n        });\r\n\r\n\r\n        if (this.path) {\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(this.path[0].x, this.path[0].y);\r\n            for(let i = 1; i < this.path.length; ++i) {\r\n                ctx.lineTo(this.path[i].x, this.path[i].y);\r\n            }\r\n            ctx.lineWidth = 2;\r\n            ctx.strokeStyle = '#f00';\r\n            ctx.stroke();\r\n\r\n        }\r\n\r\n        this.ptStart.Render(ctx, this.time);\r\n        this.ptEnd.Render(ctx, this.time);\r\n\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n    public mouseDown(x: number, y: number): void {\r\n        if (this.ptStart.inInside(x,y)) {\r\n            this.captured = this.ptStart;\r\n            return;\r\n        }\r\n        if (this.ptEnd.inInside(x,y)) {\r\n            this.captured = this.ptEnd;\r\n            return;\r\n        }\r\n       \r\n    }\r\n    public mouseUp(x: number, y: number): void {\r\n        this.captured = undefined;\r\n    }\r\n    public mouseDrag(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n\r\n        if (this.previousPt === undefined) {\r\n            const p = new Point(x, y);\r\n            this.previousPt = p\r\n            this.pts.push(p);\r\n        } else {\r\n            const p = new Point(x, y);\r\n            this.pts.push(p);\r\n            \r\n            this.lns.push(new Line(this.previousPt, p));\r\n            this.previousPt = undefined;\r\n\r\n\r\n       }\r\n\r\n\r\n    }\r\n    public mouseMove(x: number, y: number) {\r\n        if (this.captured) {\r\n            console.log(x, y)\r\n            this.captured.x = x;\r\n            this.captured.y = y;\r\n        }    \r\n    }\r\n}\r\n\r\n\r\nexport class InteractivePoint {\r\n    x: number;\r\n    y: number;\r\n    r: number = 10;\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    public Render(ctx: CanvasRenderingContext2D, t: number) {\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, Math.sin(t) + this.r, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#00f';\r\n        ctx.fill();\r\n\r\n        ctx.strokeStyle = '#fff';\r\n        ctx.stroke();\r\n    }\r\n    public inInside(x: number, y: number) {\r\n        if (distanceTo(x, y, 0, this.x, this.y, 0) < this.r + 2){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Line {\r\n    public p0: Point;\r\n    public p1: Point;\r\n    public lineWidth = 2;\r\n    constructor(p0: Point, p1: Point) {\r\n        this.p0 = p0;\r\n        this.p1 = p1;\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, t: number) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.p0.x, this.p0.y);\r\n        ctx.lineTo(this.p1.x, this.p1.y);\r\n        ctx.closePath();\r\n\r\n        ctx.lineWidth = this.lineWidth;\r\n        ctx.strokeStyle = '#fff';\r\n        ctx.stroke();\r\n\r\n    }\r\n}\r\nexport class Point {\r\n    public x: number;\r\n    public y: number;\r\n    public z: number = 0;\r\n    public r: number = 6;\r\n    constructor(x: number, y: number)  {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, t: number) {\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, Math.sin(t) + this.r, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        ctx.fillStyle = '#0f0';\r\n        ctx.fill();\r\n        ctx.strokeStyle = '#fff';\r\n        ctx.stroke();\r\n    }\r\n}","import { getLineSeg, distanceTo, Graph, Node, RendererJSAPI } from 'njscore';\r\n\r\nimport { Point, Line, InteractivePoint } from './01_Interaction';\r\n\r\nexport class Solution extends RendererJSAPI {\r\n    network: Network;\r\n\r\n    pts: Point[] = [];\r\n    lns: Line[] = [];\r\n\r\n    path: any;\r\n\r\n    previousPt: Point | undefined = undefined;\r\n\r\n    ptStart: InteractivePoint;\r\n    ptEnd: InteractivePoint;\r\n    captured: InteractivePoint | undefined = undefined;\r\n\r\n    constructor(view: any) {\r\n        super(view);\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        // disable interaction with a base map\r\n        // https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html\r\n        this.mView.on(\"drag\", (event) => {\r\n            event.stopPropagation();\r\n        });\r\n        this.mView.navigation.mouseWheelZoomEnabled = false;\r\n        this.center(-71.102761, 42.366946);\r\n        this.zoom(15)\r\n\r\n        this.network = new Network();\r\n\r\n        this.ptStart = new InteractivePoint(315, 90);\r\n        this.ptEnd = new InteractivePoint(900, 800);\r\n\r\n        // !! you should execute it for rendering\r\n        this.start();\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n\r\n        this.lns.map( (l: Line) => {\r\n            return l.render(ctx, this.time);\r\n        });\r\n        this.pts.map( (p: Point) => {\r\n            return p.render(ctx, this.time);\r\n        });\r\n\r\n\r\n        this.network.render(ctx);\r\n\r\n        if (this.path) {\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(this.path[0].x, this.path[0].y);\r\n            for(let i = 1; i < this.path.length; ++i) {\r\n                ctx.lineTo(this.path[i].x, this.path[i].y);\r\n            }\r\n            ctx.lineWidth = 2;\r\n            ctx.strokeStyle = '#f00';\r\n            ctx.stroke();\r\n\r\n        }\r\n\r\n        this.ptStart.Render(ctx, this.time);\r\n        this.ptEnd.Render(ctx, this.time);\r\n\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n    public mouseDown(x: number, y: number): void {\r\n        if (this.ptStart.inInside(x,y)) {\r\n            this.captured = this.ptStart;\r\n            return;\r\n        }\r\n        if (this.ptEnd.inInside(x,y)) {\r\n            this.captured = this.ptEnd;\r\n            return;\r\n        }\r\n       \r\n    }\r\n    public mouseUp(x: number, y: number): void {\r\n        this.captured = undefined;\r\n    }\r\n    public mouseDrag(x: number, y: number): void {\r\n        // TODO\r\n    }\r\n    public mouseClick(x: number, y: number): void {\r\n\r\n        if (this.previousPt === undefined) {\r\n            const p = new Point(x, y);\r\n            this.previousPt = p\r\n            this.pts.push(p);\r\n        } else {\r\n            const p = new Point(x, y);\r\n            this.pts.push(p);\r\n            \r\n            this.lns.push(new Line(this.previousPt, p));\r\n            this.previousPt = undefined;\r\n\r\n            const obj = (JSON.parse(JSON.stringify(this.lns)));\r\n            \r\n            this.network = new Network();\r\n            this.network.addLine(obj);\r\n\r\n            this.path = this.network.getPath(\r\n                    { x: this.ptStart.x, y: this.ptStart.y, z: 0 }, \r\n                    { x: this.ptEnd.x,   y: this.ptEnd.y,   z: 0\r\n                });\r\n\r\n        }\r\n\r\n    }\r\n    public mouseMove(x: number, y: number) {\r\n        if (this.captured) {\r\n            this.captured.x = x;\r\n            this.captured.y = y;\r\n\r\n            if (this.network.isActivated) {\r\n                this.path = this.network.getPath(\r\n                    { x: this.ptStart.x, y: this.ptStart.y, z: 0 }, \r\n                    { x: this.ptEnd.x,   y: this.ptEnd.y,   z: 0\r\n                });\r\n        \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass Network {\r\n    graph: Graph;\r\n    isActivated = false;\r\n    constructor() {\r\n        this.graph = new Graph();\r\n    }\r\n    public addLine(lns: any) {\r\n        const lineSeg = getLineSeg(lns);\r\n        this.graph.initByLines(lineSeg)\r\n        console.log(this.graph);\r\n        this.isActivated = true;\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        \r\n        this.graph.edges.map((e, i) => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(e.n0.x, e.n0.y);\r\n            ctx.lineTo(e.n1.x, e.n1.y);\r\n            ctx.lineWidth = 1;\r\n            ctx.strokeStyle = '#fff';\r\n            ctx.stroke();\r\n            return undefined;\r\n        });\r\n\r\n        this.graph.nodes.map((n) => {\r\n            ctx.beginPath();\r\n            ctx.arc(n.x, n.y, 5, 0, Math.PI * 2);\r\n            ctx.fillStyle = '#fff';\r\n            ctx.fill();\r\n            return undefined;\r\n        });\r\n\r\n        if (this.graph.nodeOrigin) {\r\n            ctx.beginPath();\r\n            ctx.arc(this.graph.nodeOrigin.x, this.graph.nodeOrigin.y, 7, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fillStyle = '#f00';\r\n            ctx.fill();\r\n        }\r\n\r\n        if (this.graph.nodeTarget) {\r\n            ctx.beginPath();\r\n            ctx.arc(this.graph.nodeTarget.x, this.graph.nodeTarget.y, 7, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fillStyle = '#f00';\r\n            ctx.fill();\r\n        }\r\n    }\r\n    public getPath(p0, p1) {\r\n        const nodeStart = this.graph.findClosestNode(p0);\r\n        const nodeEnd = this.graph.findClosestNode(p1);\r\n\r\n        this.graph.propagationByNode(nodeStart);\r\n        // this.graph.propagationByNode(nodeStart, costFnDistance, 0.1);\r\n\r\n        const nodes = this.graph.backpropagation(nodeEnd);\r\n        return nodes;\r\n    }\r\n}\r\nconst costFnDistance = (p0: Node, p1: Node, beta: number = 0.0002) => {\r\n    return distanceTo(p0.x, p0.y, p0.z, p1.x, p1.y, p1.z);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["Solution","RendererJSAPI","constructor","view","super","pts","lns","path","previousPt","undefined","ptStart","ptEnd","captured","this","mView","on","event","stopPropagation","navigation","mouseWheelZoomEnabled","center","zoom","InteractivePoint","start","render","ctx","map","l","time","p","beginPath","moveTo","x","y","i","length","lineTo","lineWidth","strokeStyle","stroke","Render","mouseDown","inInside","mouseUp","mouseDrag","mouseClick","Point","push","Line","mouseMove","console","log","r","t","arc","Math","sin","PI","closePath","fillStyle","fill","distanceTo","p0","p1","z","network","Network","obj","JSON","parse","stringify","addLine","getPath","isActivated","graph","Graph","lineSeg","getLineSeg","initByLines","edges","e","n0","n1","nodes","n","nodeOrigin","nodeTarget","nodeStart","findClosestNode","nodeEnd","propagationByNode","backpropagation"],"sourceRoot":""}