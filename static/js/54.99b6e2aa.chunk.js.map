{"version":3,"file":"static/js/54.99b6e2aa.chunk.js","mappings":"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","sources":["PART_04_Geometry_Data/LAB_Web_07_GeometryAsDataStructure/GeometryAsDataStructure.ts","PART_04_Geometry_Data/LAB_Web_07_GeometryAsDataStructure/index.ts"],"sourcesContent":["export class Vector {\r\n    // ........................... static\r\n    static distance(v0: Vector, v1: Vector) {\r\n        // https://en.wikipedia.org/wiki/Distance\r\n        return Math.sqrt((v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z));\r\n    }\r\n\r\n    // ........................... instance \r\n    public x: number;\r\n    public y: number;\r\n    public z: number;\r\n    constructor(x: number, y: number, z: number = 0.0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    public toString() {\r\n        return `x: ${this.x}, y: ${this.y}, z: ${this.z} `;\r\n    }\r\n    public toJson() {\r\n        return {\r\n            \"x\": this.x,\r\n            \"y\": this.y,\r\n            \"z\": this.z\r\n        };\r\n    }\r\n    public toDraw() {\r\n        // TODO based on your renderer!\r\n    }\r\n}\r\nexport class Point {\r\n    vec: Vector;\r\n    color: Color;\r\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\r\n        this.vec = new Vector(x, y, z);\r\n        this.color = new Color(0, 255, 0);\r\n    }\r\n    public distanceTo(other: Point) {\r\n        return Vector.distance(this.vec, other.vec)\r\n    }\r\n    public setColor(r: number, g: number, b: number, a: number = 1.0) {\r\n        this.color.r = r;\r\n        this.color.g = g;\r\n        this.color.b = b;\r\n        this.color.a = a;\r\n    }\r\n    public getHex() {\r\n        return this.color.toHex();\r\n    }\r\n}\r\nexport class Color {\r\n    public r: number;\r\n    public g: number;\r\n    public b: number;\r\n    public a: number;\r\n    constructor(r: number = 255, g: number = 255, b: number = 255, a: number = 1.0) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n    }\r\n    public normaized() {\r\n        return [this.r /= 255, this.g /= 255, this.b /= 255]\r\n    }\r\n    // https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\r\n    public toHex() {\r\n        return '#' + [Math.round(this.r), Math.round(this.g), Math.round(this.b)].map(x => {\r\n            const hex = x.toString(16);\r\n            return hex.length === 1 ? '0' + hex : hex;\r\n        }).join('');\r\n    }\r\n    public toHSV() {\r\n        const r = this.r / 255;\r\n        const g = this.g / 255;\r\n        const b = this.b / 255;\r\n        const max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n        let h = max, s = max, v = max;\r\n        const d = max - min;\r\n        s = max === 0 ? 0 : d / max;\r\n\r\n        if (max === min) {\r\n            h = 0; // achromatic\r\n        } else {\r\n            switch (max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n                default: break;\r\n            }\r\n\r\n            h /= 6;\r\n        }\r\n        return [h, s, v]; // 0 to 1\r\n    };\r\n}\r\nexport class Line {\r\n    p0: Point;\r\n    p1: Point;\r\n    constructor(point0: Point, point1: Point) {\r\n        console.log(this);\r\n        this.p0 = point0;\r\n        this.p1 = point1;\r\n\r\n    }\r\n    public getMidPoint() {\r\n        // https://en.wikipedia.org/wiki/Midpoint\r\n        return new Point(this.p0.vec.x + ((this.p1.vec.x + this.p0.vec.x) * 0.5), this.p0.vec.y + ((this.p1.vec.y + this.p0.vec.y) * 0.5), this.p0.vec.z + ((this.p1.vec.z + this.p0.vec.z) * 0.5));\r\n    }\r\n}\r\nexport class Polyline {\r\n    public pts: Point[];\r\n    public isOpen: boolean;\r\n    constructor(isOpen: boolean = false) {\r\n        this.pts = [];\r\n    }\r\n    public push(other: Point) {\r\n        this.pts.push(other);\r\n    }\r\n    public toString() {\r\n        return `Length of pts: ${this.pts.length}`;\r\n    }\r\n    public getLength() {\r\n        let totalDistance = 0.0;\r\n        for (let i = 0; i < this.pts.length - 1; ++i) {\r\n            let dis = this.pts[i].distanceTo(this.pts[i + 1])\r\n            totalDistance += dis;\r\n        }\r\n        return totalDistance;\r\n    }\r\n}\r\nexport class Curve {\r\n    public pts: Point[];\r\n    public isOpen: boolean;\r\n    public degree = 1;\r\n    constructor(degree: number = 1, isOpen: boolean = false) {\r\n        this.pts = [];\r\n        this.isOpen = isOpen;\r\n        this.degree = degree;\r\n        this.interpolation();\r\n    }\r\n    public add(other: Point) {\r\n        this.pts.push(other);\r\n    }\r\n    public toString() {\r\n        return `Length of pts: ${this.pts.length}`;\r\n    }\r\n    private interpolation() {\r\n        // TODO\r\n    }\r\n}\r\nexport class Polygon {\r\n    public pts: Point[] = []\r\n    constructor(pts: Point[] ) {\r\n        this.pts = pts;\r\n        // TODO\r\n    }\r\n    public add(other: Point) {\r\n        // TODO\r\n    }\r\n    public toString() {\r\n        // TODO\r\n    }\r\n    public getLength() {\r\n        // TODO\r\n    }\r\n    public getArea() {\r\n        // TODO\r\n    }\r\n}\r\nexport class Mesh {\r\n    vertex: Point[];\r\n    face: number[][];\r\n    constructor() {\r\n        this.vertex = [];\r\n        this.face = [];\r\n    }\r\n    public addVertex(other: Point) {\r\n        this.vertex.push(other);\r\n    }\r\n    public addFace(A: number, B: number, C: number) {\r\n        this.face.push([A, B, C]);\r\n    }\r\n    public toString() {\r\n        return `Length of pts: ${this.vertex.length}`;\r\n    }\r\n}","import { Vector, Color, Point, Line, Curve, Polyline, Polygon, Mesh}from './GeometryAsDataStructure';\r\n\r\nexport class Solution  {\r\n\r\n    constructor(div: HTMLElement) {\r\n\r\n        // ................................ vector\r\n        let v0 = new Vector(2, 3, 4);\r\n        let v1 = new Vector(5, 6, 7);\r\n\r\n        console.log('distance between v0 and v1: ', Vector.distance(v0, v1));\r\n        console.log(v0.toString());\r\n        console.log(v0.toJson());\r\n\r\n\r\n        // ................................ point\r\n        let p0 = new Point(0, 0, 0);\r\n        let p1 = new Point(3, 4, 5);\r\n\r\n        console.log('distance from p0 to p1', p0.distanceTo(p1))\r\n        p0.setColor(255, 0, 255);\r\n        console.log(p0.getHex());\r\n\r\n\r\n        // ................................ color\r\n        const myColorA = new Color(25, 100, 25, 1)\r\n        console.log(myColorA.toHex());\r\n        console.log(myColorA.toHSV()); // http://colorizer.org/\r\n\r\n\r\n        // ................................ line\r\n        let point0 = new Point(0, 0, 0);\r\n        let point1 = new Point(2.34, 5.4, 20);\r\n        let ln = new Line(point0, point1);\r\n        console.log(ln);\r\n        console.log(ln.getMidPoint());\r\n\r\n        // ................................ polyline\r\n        let pl = new Polyline();\r\n        pl.push(new Point(0, 1.25, 0))\r\n        pl.push(new Point(1, 2.5, 1))\r\n        pl.push(new Point(2, 1, 3.15))\r\n        pl.push(new Point(3, 2.5, 2))\r\n\r\n        console.log(pl.toString())\r\n        console.log(pl.getLength())\r\n\r\n\r\n        // ................................ curve\r\n        let curve = new Curve(1);\r\n        curve.add(new Point(0, 1.25, 0))\r\n        curve.add(new Point(1, 2.5, 1))\r\n        curve.add(new Point(2, 1, 3.15))\r\n        curve.add(new Point(3, 2.5, 2))\r\n        console.log(curve.toString())\r\n\r\n\r\n        // ................................ mesh\r\n        let mesh = new Mesh();\r\n        let xNum = 5;\r\n        let yNum = 5;\r\n        for (let j = 0; j < yNum; ++j) {\r\n            for (let i = 0; i < xNum; ++i) {\r\n                mesh.addVertex(new Point(i, j, Math.random() * 2));\r\n            }\r\n        }\r\n        for (let j = 0; j < yNum - 1; ++j) {\r\n            for (let i = 0; i < xNum - 1; ++i) {\r\n                let index = i + (j * xNum);\r\n                mesh.addFace(index, index + 1, index + xNum);\r\n                mesh.addFace(index + 1, index + xNum, index + xNum + 1);\r\n            }\r\n        }\r\n        console.log(mesh.toString())\r\n        console.log(mesh.vertex);\r\n        console.log(mesh.face);\r\n    }\r\n}\r\n"],"names":["Vector","distance","v0","v1","Math","sqrt","x","y","z","constructor","arguments","length","undefined","this","toString","concat","toJson","toDraw","Point","vec","color","Color","distanceTo","other","setColor","r","g","b","a","getHex","toHex","normaized","round","map","hex","join","toHSV","max","min","h","s","v","d","Line","point0","point1","p0","p1","console","log","getMidPoint","Polyline","pts","isOpen","push","getLength","totalDistance","i","Curve","degree","interpolation","add","Mesh","vertex","face","addVertex","addFace","A","B","C","Solution","div","myColorA","ln","pl","curve","mesh","j","random","yNum","xNum","index"],"sourceRoot":""}