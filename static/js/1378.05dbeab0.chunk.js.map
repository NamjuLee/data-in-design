{"version":3,"file":"static/js/1378.05dbeab0.chunk.js","mappings":"0KAIO,MAAMA,UAAiBC,EAAAA,cAI1BC,WAAAA,GACIC,MADkBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,QACZ,KAHbG,gBAAU,EAKNC,KAAKC,OAAOC,SAASC,IAAI,EAAG,GAAI,KAEhCC,EAAAA,EAAAA,eAAc,4GAA4GC,MAAMC,IAC5H,MAAMC,EAAQD,EAAEE,MAAM,eAEhBC,EAAK,GACLC,EAAU,GACVC,EAAS,GAEf,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAMV,SAAUe,EAAG,CACnC,MAAMC,EAAON,EAAMK,GAAGJ,MAAM,KAGZ,MAAZK,EAAK,IACLJ,EAAGK,MAAMD,EAAK,IAAMA,EAAK,IAAMA,EAAK,IAGxB,OAAZA,EAAK,IACLF,EAAOG,MAAMD,EAAK,GAAK,KAAMA,EAAK,GAAK,KAAMA,EAAK,GAAI,KAG1C,MAAZA,EAAK,KACLH,EAAQI,MAAMD,EAAK,IAAKA,EAAK,IAAKA,EAAK,IACvCH,EAAQI,MAAMD,EAAK,IAAKA,EAAK,IAAKA,EAAK,IAG/C,CACAE,QAAQC,IAAIP,GACZM,QAAQC,IAAIN,GAEZ,MAAMO,EAAW,IAAIC,EAAAA,IAAwB,CACzCC,KAAMD,EAAAA,IACNE,cAAc,IAIZC,EAAW,IAAIH,EAAAA,IACrBG,EAASC,SAASZ,GAClBW,EAASE,aAAa,WAAY,IAAIL,EAAAA,IAA6BT,EAAI,IACvEY,EAASE,aAAa,QAAS,IAAIL,EAAAA,IAA6BP,EAAQ,IAExEU,EAASG,wBACTH,EAASI,uBACT,MAAMC,EAAO,IAAIR,EAAAA,IAAWG,EAAUJ,GACtCjB,KAAK2B,MAAMC,IAAIF,GAEf1B,KAAK6B,OAAO,GAEpB,E","sources":["PART_04_Geometry_Data/LAB_Web_05_Mesh/index.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport { RendererThree, getCSVFromURL } from '../../lib';\r\n\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    pointLight: THREE.PointLight\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        this.camera.position.set(0, 50, 50);\r\n\r\n        getCSVFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/geometry/CFDSimulationOBJ/CFDSimulationCustom.obj').then((d) => {\r\n            const lines = d.split(/\\r\\n|\\r|\\n/g);\r\n\r\n            const vs = []\r\n            const indices = [];\r\n            const colors = []\r\n\r\n            for (let i = 0; i < lines.length; ++i) {\r\n                const line = lines[i].split(' ');\r\n                \r\n         \r\n                if (line[0] === 'v') {\r\n                    vs.push(+line[1] , +line[3] , +line[2] )\r\n                }\r\n                \r\n                if (line[0] === 'vc') {\r\n                    colors.push(+line[1] / 255, +line[2] / 255, +line[3]/ 255)\r\n                }\r\n\r\n                if (line[0] === 'f') {\r\n                    indices.push(+line[1], +line[2], +line[3])\r\n                    indices.push(+line[1], +line[3], +line[4])\r\n\r\n                }\r\n            }\r\n            console.log(vs);\r\n            console.log(indices);\r\n    \r\n            const material = new THREE.MeshBasicMaterial({\r\n                side: THREE.DoubleSide,\r\n                vertexColors: true,\r\n                // wireframe: true,\r\n            });\r\n          \r\n            const geometry = new THREE.BufferGeometry();\r\n            geometry.setIndex(indices );\r\n            geometry.setAttribute('position', new THREE.Float32BufferAttribute(vs, 3));\r\n            geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n\r\n            geometry.computeBoundingSphere();\r\n            geometry.computeVertexNormals();\r\n            const mesh = new THREE.Mesh(geometry, material);\r\n            this.scene.add(mesh);\r\n\r\n            this.start();\r\n        });\r\n    }\r\n}\r\n"],"names":["Solution","RendererThree","constructor","super","arguments","length","undefined","pointLight","this","camera","position","set","getCSVFromURL","then","d","lines","split","vs","indices","colors","i","line","push","console","log","material","THREE","side","vertexColors","geometry","setIndex","setAttribute","computeBoundingSphere","computeVertexNormals","mesh","scene","add","start"],"sourceRoot":""}