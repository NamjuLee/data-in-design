{"version":3,"file":"static/js/4629.fdadc90f.chunk.js","mappings":"gJAAO,MAAMA,EACTC,WAAAA,CAAYC,GACRC,QAAQC,IAAI,kEACZD,QAAQC,IAAI,oCACZD,QAAQC,IAAI,qCAIZ,MAAMC,EAAY,EAAE,GAAI,EAAG,GACrBC,EAAY,CAAC,EAAG,EAAG,GAMnBC,GAAaD,EAAU,GAAKD,EAAU,IAAE,GACxCG,GAAaF,EAAU,GAAKD,EAAU,IAAE,GACxCI,GAAaH,EAAU,GAAKD,EAAU,IAAE,GAC9CF,QAAQC,IAAI,YAAaG,EAAW,YAAaC,EAAW,YAAaC,GAGzE,MAAMC,EAAyB,GAC/B,IAAK,IAAIC,EAAI,EAAGA,EATH,KASeA,EAAG,CAC3B,MAAMC,EAAOP,EAAU,GAAKM,EAAIF,EAC1BI,EAAmB,GACzB,IAAK,IAAIC,EAAI,EAAGA,EAbP,KAamBA,EAAG,CAC3B,MAAMC,EAAOV,EAAU,GAAKS,EAAIN,EAE1BQ,EAAiB,GACvB,IAAK,IAAIC,EAAI,EAAGA,EAlBX,KAkBuBA,EAAG,CAC3B,MAAMC,EAAOb,EAAU,GAAKY,EAAIV,EAChCS,EAAMG,KAAM,IAAIC,EAAMF,EAAMH,EAAMH,GACtC,CACAC,EAAMM,KAAKH,EACf,CACAN,EAAUS,KAAKN,EACnB,CAEAV,QAAQC,IAAIM,EAEhB,CACOW,OAAAA,GAEP,EAGJ,MAAMD,EAMFnB,WAAAA,CAAYgB,EAAWH,EAAWH,GAAY,KALvCM,OAAC,OACDH,OAAC,OACDH,OAAC,OACDW,WAAK,OACLC,UAAI,EAEPC,KAAKP,EAAIA,EACTO,KAAKV,EAAIA,EACTU,KAAKb,EAAIA,CACb,E","sources":["CLASS_09_Raster_Pixel_Voxel/LAB_Web_10_Voxel/index.ts"],"sourcesContent":["export class Solution {\r\n    constructor(view: any) {\r\n        console.log(\"Let's learn Typescript for digital mapping and visualization!!\");\r\n        console.log(\"Typescript, Voxel data Structure\");\r\n        console.log(\"=================================\");\r\n        // Codepan\r\n\r\n        // a cube, 2 by 2\r\n        const minVector = [-1, -1, 0]\r\n        const maxVector = [1, 1, 2]\r\n\r\n        const xNum = 12;\r\n        const yNum = 12;\r\n        const zNum = 12;\r\n\r\n        const xInterval = (maxVector[0] - minVector[0]) / (xNum - 1);\r\n        const yInterval = (maxVector[1] - minVector[1]) / (yNum - 1);\r\n        const zInterval = (maxVector[2] - minVector[2]) / (zNum - 1);\r\n        console.log('xInterval', xInterval, 'yInterval', yInterval, 'zInterval', zInterval)\r\n\r\n        // 3D data array\r\n        const listVoxel: Pixel[][][] = [];\r\n        for (let z = 0; z < zNum; ++z) {\r\n            const theZ = minVector[2] + z * zInterval;\r\n            const yList: Pixel[][] = []\r\n            for (let y = 0; y < yNum; ++y) {\r\n                const theY = minVector[1] + y * yInterval;\r\n\r\n                const xList: Pixel[] = []\r\n                for (let x = 0; x < xNum; ++x) {\r\n                    const theX = minVector[0] + x * xInterval;\r\n                    xList.push( new Pixel(theX, theY, theZ));\r\n                }\r\n                yList.push(xList);\r\n            }\r\n            listVoxel.push(yList);\r\n        }\r\n\r\n        console.log(listVoxel)\r\n\r\n    }\r\n    public destroy() {\r\n\r\n    }\r\n}\r\n\r\nclass Pixel {\r\n    public x;\r\n    public y;\r\n    public z;\r\n    public color: any;\r\n    public data: any;\r\n    constructor(x: number, y: number, z: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n}"],"names":["Solution","constructor","view","console","log","minVector","maxVector","xInterval","yInterval","zInterval","listVoxel","z","theZ","yList","y","theY","xList","x","theX","push","Pixel","destroy","color","data","this"],"sourceRoot":""}