"use strict";(self.webpackChunkdata_in_design=self.webpackChunkdata_in_design||[]).push([[4504],{44504:(e,t,r)=>{r.r(t),r.d(t,{default:()=>y});var s=r(8),o=(r(35238),r(30726)),i=r(64681),a=r(4081),n=r(37267),l=r(52494),c=r(20591),m=r(59844),f=r(86866),u=r(99846),d=r(31650),p=r(20118),S=r(46533),h=r(76797);class y{convertVectorFieldData(e){const t=a.A.fromJSON(e.pixelBlock),r=(0,u.FI)(t,e.type);return Promise.resolve((0,o.Ru)(r)&&r.toJSON())}async decode(e){const t=await(0,n.D)(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=a.A.fromJSON(e.pixelBlock),e.extent=e.extent?h.A.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve((0,o.Ru)(t)&&t.toJSON())}async updateSymbolizer(e){var t;this.symbolizer=p.A.fromJSON(e.symbolizerJSON),e.histograms&&"rasterStretch"===(null===(t=this.symbolizer)||void 0===t?void 0:t.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}async updateRasterFunction(e){this.rasterFunction=(0,c.vt)(e.rasterFunctionJSON)}async process(e){const t=this.rasterFunction.process({extent:h.A.fromJSON(e.extent),primaryPixelBlocks:e.primaryPixelBlocks.map((e=>(0,o.Ru)(e)?a.A.fromJSON(e):null)),primaryRasterIds:e.primaryRasterIds});return(0,o.Ru)(t)?t.toJSON():null}stretch(e){const t=this.symbolizer.simpleStretch(a.A.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve((0,o.Ru)(t)&&t.toJSON())}estimateStatisticsHistograms(e){const t=(0,f.f4)(a.A.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=(0,l.lD)(a.A.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach(((e,r)=>{t.set(r,null===e||void 0===e?void 0:e.toJSON())})),Promise.resolve(t)}async mosaicAndTransform(e){var t;const r=e.srcPixelBlocks.map((e=>e?new a.A(e):null)),s=(0,l.z7)(r,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let i,n=s;return e.coefs&&(n=(0,l.$i)(s,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(i=(0,l.QF)(e.destDimension,e.gcsGrid),n=(0,o.oA)((0,u.Y2)(n,e.isUV?"vector-uv":"vector-magdir",i))),{pixelBlock:null===(t=n)||void 0===t?void 0:t.toJSON(),localNorthDirections:i}}async createFlowMesh(e,t){const r={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:s,indexData:o}=await(0,S.CW)(e.meshType,e.simulationSettings,r,t.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:o.buffer},transferList:[s.buffer,o.buffer]}}async getProjectionOffsetGrid(e){const t=h.A.fromJSON(e.projectedExtent),r=h.A.fromJSON(e.srcBufferExtent);let o=null;e.datumTransformationSteps&&(o=new i.A({steps:e.datumTransformationSteps})),(e.includeGCSGrid||(0,m.xh)(t.spatialReference,r.spatialReference,o))&&await(0,m.Hh)();const a=e.rasterTransform?(0,d.l)(e.rasterTransform):null;return(0,m.l0)((0,s.A)((0,s.A)({},e),{},{projectedExtent:t,srcBufferExtent:r,datumTransformation:o,rasterTransform:a}))}}}}]);
//# sourceMappingURL=4504.16c1e79d.chunk.js.map