"use strict";(self.webpackChunkData_in_Design=self.webpackChunkData_in_Design||[]).push([[185],{10185:(e,t,r)=>{r.r(t),r.d(t,{default:()=>m});var i=r(8),n=r(35143),a=r(50076),s=r(30726),o=r(68134),c=r(46053),l=(r(18690),r(40565),r(85842)),d=r(77725),u=r(51542),p=r(87683);function h(e,t){if((0,s.$I)(e)&&(0,s.$I)(t))return null;const r={};return(0,s.Ru)(t)&&(r.geometry=t.toJSON()),(0,s.Ru)(e)&&(r.where=e),r}let y=class extends u.default{constructor(){super(...arguments),this._enabledDataReceived=!1,this.errorString=null,this.connectionStatus="disconnected"}initialize(){this.handles.add([(0,o.wB)((()=>{var e;return null===(e=this.layer)||void 0===e?void 0:e.purgeOptions}),(()=>this._update())),(0,o.wB)((()=>this.suspended),(e=>{e?this._proxy.pauseStream():this._proxy.resumeStream()}))])}get connectionError(){if(this.errorString)return new a.A("stream-controller",this.errorString)}on(e,t){"data-received"===e&&(this._enabledDataReceived=!0,this._proxy.enableEvent("data-received",!0));const r=super.on(e,t),i=this;return{remove(){r.remove(),"data-received"===e&&(i._proxy.closed||i.hasEventListener("data-received")||i._proxy.enableEvent("data-received",!1))}}}queryLatestObservations(e,t){if(!this.layer.timeInfo.endField&&!this.layer.timeInfo.startField)throw new a.A("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");return this._proxy.queryLatestObservations(this._cleanUpQuery(e),t).then((e=>{const t=d.default.fromJSON(e);return t.features.forEach((e=>{e.layer=this.layer,e.sourceLayer=this.layer})),t}))}detach(){super.detach(),this.connectionStatus="disconnected"}_createClientOptions(){return(0,i.A)((0,i.A)({},super._createClientOptions()),{},{setProperty:e=>{this.set(e.propertyName,e.value)}})}_createTileRendererHash(e){const t="".concat(JSON.stringify(this.layer.purgeOptions),".").concat(JSON.stringify(h(this.layer.definitionExpression,this.layer.geometryDefinition)),")");return super._createTileRendererHash(e)+t}async _createServiceOptions(){const e=this.layer,{objectIdField:t}=e,r=e.fields.map((e=>e.toJSON())),i=(0,p.eh)(e.geometryType),n=e.timeInfo&&e.timeInfo.toJSON()||null,a=e.spatialReference?e.spatialReference.toJSON():null;return{type:"stream",fields:r,geometryType:i,objectIdField:t,timeInfo:n,source:this.layer.parsedUrl,serviceFilter:h(this.layer.definitionExpression,this.layer.geometryDefinition),purgeOptions:this.layer.purgeOptions.toJSON(),enableDataReceived:this._enabledDataReceived,spatialReference:a,maxReconnectionAttempts:this.layer.maxReconnectionAttempts,maxReconnectionInterval:this.layer.maxReconnectionInterval,updateInterval:this.layer.updateInterval,customParameters:e.customParameters}}};(0,n._)([(0,c.MZ)()],y.prototype,"errorString",void 0),(0,n._)([(0,c.MZ)({readOnly:!0})],y.prototype,"connectionError",null),(0,n._)([(0,c.MZ)()],y.prototype,"connectionStatus",void 0),y=(0,n._)([(0,l.$)("esri.views.2d.layers.StreamLayerView2D")],y);const m=y}}]);
//# sourceMappingURL=185.5a8d89bd.chunk.js.map