{"version":3,"file":"static/js/4848.eff84ba1.chunk.js","mappings":"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","sources":["CLASS_12_Design_Data_Visualization/LAB_Web_Visualization_3D_for_GIS/Slowzone_02_Line/index.ts","CLASS_12_Design_Data_Visualization/LAB_Web_Visualization_3D_for_GIS/Slowzone_03_Polyline/index.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport { getJSONFromURL } from 'njscore';\r\nimport { RendererThree, MercatorProjection, } from '../../../lib';\r\n\r\nimport { renderLines } from '../Slowzone_03_Polyline';\r\n\r\nexport class Solution extends RendererThree {\r\n    streetOSM: any = [];\r\n    routesTreated: any = [];\r\n    routesControl: any = [];\r\n    zones30: any = [];\r\n\r\n    meshStreet: THREE.LineSegments;\r\n    meshSpike: THREE.LineSegments;\r\n\r\n    raycaster = new THREE.Raycaster();\r\n    pointer = new THREE.Vector2();\r\n    sphere: THREE.Mesh;\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        this.camera.position.set(0, 30, 30);\r\n\r\n        // ................................................................................\r\n        // your code goes here\r\n\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/street_osm.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.streetOSM.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            this.meshStreet = renderLines(this.scene, this.streetOSM, [0.3, 0.3, 0.3]);\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/treated-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesTreated.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                this.meshSpike = renderLineSpike(this.scene, this.routesTreated, [1, 0, 0]);\r\n                this.start();\r\n            });\r\n        });\r\n    }\r\n    public update(scene: THREE.Scene) {\r\n        for (let i = 1; i < this.meshSpike.geometry.attributes.position.count; i += 2) {\r\n            let p = this.meshSpike.geometry.attributes.position;\r\n\r\n            let x = p.getX(i);\r\n            let y = p.getY(i);\r\n            let z = p.getZ(i)\r\n\r\n            y = Math.sin(5 * x * z + this.t * 5) * 9\r\n\r\n            y = y < 0 ? 0 : y;\r\n\r\n            let np = new THREE.Vector3(x, y, z);\r\n            this.meshSpike.geometry.attributes.position.setXYZ(i, np.x, np.y, np.z);\r\n\r\n            this.meshSpike.geometry.attributes.color.setXYZ(i - 1, 0, y, 0);\r\n            this.meshSpike.geometry.attributes.color.setXYZ(i, y, 0, 0);\r\n        }\r\n\r\n        this.meshSpike.geometry.attributes.position.needsUpdate = true;\r\n        this.meshSpike.geometry.attributes.color.needsUpdate = true;\r\n        this.meshSpike.geometry.computeVertexNormals();\r\n    }\r\n}\r\nconst renderLineSpike = (scene: THREE.Scene, paths: any, color: number[]) => {\r\n    const geometry = new THREE.BufferGeometry();\r\n    const material = new THREE.LineBasicMaterial({ vertexColors: true });\r\n\r\n    const positions = [];\r\n    const colors = [];\r\n\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n    let xC = 0\r\n    let yC = 0\r\n    let Count = 0\r\n\r\n    for (let i = 0; i < paths.length; ++i) {\r\n        const route = paths[i]\r\n\r\n        for (let j = 0; j < route.length; ++j) {\r\n            for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                const [xPro, yPro] = MercatorProjection(route[j][k][0], route[j][k][1]);\r\n                xC += xPro;\r\n                yC += yPro;\r\n                Count += 1;\r\n\r\n                const x = (xPro + xOFf) * scale\r\n                const y = (yPro + yOFf) * scale\r\n                positions.push(x, 0, y)\r\n                positions.push(x, 10, y)\r\n\r\n                colors.push(color[0], color[1], color[2]);\r\n                colors.push(color[0], color[1], color[2]);\r\n\r\n            }\r\n        }\r\n    }\r\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n    geometry.computeBoundingSphere();\r\n\r\n    const line = new THREE.LineSegments(geometry, material);\r\n    scene.add(line);\r\n    return line\r\n};","import * as THREE from 'three';\r\nimport { RendererThree, } from '../../../lib';\r\nimport { getJSONFromURL, MercatorProjection, } from 'njscore';\r\n\r\nexport class Solution extends RendererThree {\r\n\r\n    streetOSM: any = [];\r\n    routesTreated: any = [];\r\n    routesControl: any = [];\r\n    zones30: any = [];\r\n\r\n    constructor(id: string = 'main') {\r\n        super(id)\r\n\r\n        const light = new THREE.PointLight(0xffffff, 0.8);\r\n        this.camera.add(light);\r\n        this.scene.add(light);\r\n        this.camera.position.set(0, 40, 48);\r\n\r\n        // ................................................................................\r\n        // your code goes here\r\n        const path = '/static/research/slow-zone/';\r\n        getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/street_osm.geojson').then((data) => {\r\n            for (let i = 0; i < data['features'].length; ++i) {\r\n                this.streetOSM.push(data['features'][i]['geometry']['coordinates']);\r\n            }\r\n            renderLines(this.scene, this.streetOSM, [0, 1, 1]);\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/treated-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesTreated.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                renderLines(this.scene, this.routesTreated, [1, 0, 0]);\r\n            });\r\n\r\n            getJSONFromURL('https://raw.githubusercontent.com/NamjuLee/data/master/Paris/control-st.geojson').then((data) => {\r\n                for (let i = 0; i < data['features'].length; ++i) {\r\n                    this.routesControl.push(data['features'][i]['geometry']['coordinates']);\r\n                }\r\n                renderLines(this.scene, this.routesControl, [0, 1, 0]);\r\n            });\r\n\r\n            this.start();\r\n        });\r\n    }\r\n}\r\nexport const renderLines = (scene: THREE.Scene, paths: any, color: number[]) => {\r\n    const geometry = new THREE.BufferGeometry();\r\n    const material = new THREE.LineBasicMaterial({ vertexColors: true });\r\n\r\n    const positions = [];\r\n    const colors = [];\r\n    const indices = [];\r\n\r\n    const xOFf = -15478803.88731685;\r\n    const yOFf = -4766681.448690384;\r\n    const scale = 0.01;\r\n\r\n    let xC = 0\r\n    let yC = 0\r\n    let Count = 0\r\n\r\n    for (let i = 0; i < paths.length; ++i) {\r\n        const route = paths[i]\r\n\r\n        for (let j = 0; j < route.length; ++j) {\r\n            for (let k = 0; k < route[j].length; ++k) {\r\n\r\n                const [xPro, yPro] = MercatorProjection(route[j][k][0], route[j][k][1]);\r\n                xC += xPro;\r\n                yC += yPro;\r\n                Count += 1;\r\n\r\n                const x = (xPro + xOFf) * scale\r\n                const y = (yPro + yOFf) * scale\r\n                positions.push(x, 0, y)\r\n                colors.push(color[0], color[1], color[2]);\r\n\r\n                if (k < route[j].length - 1) {\r\n                    indices.push(Math.floor(positions.length / 3) - 1, Math.floor(positions.length / 3));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    geometry.setIndex(indices);\r\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n    geometry.computeBoundingSphere();\r\n    const line = new THREE.LineSegments(geometry, material);\r\n    scene.add(line);\r\n    return line;\r\n};"],"names":["Solution","RendererThree","constructor","super","arguments","length","undefined","streetOSM","routesTreated","routesControl","zones30","meshStreet","meshSpike","raycaster","THREE","pointer","sphere","this","camera","position","set","getJSONFromURL","then","data","i","push","renderLines","scene","renderLineSpike","start","update","geometry","attributes","count","p","x","getX","y","getY","z","getZ","Math","sin","t","np","setXYZ","color","needsUpdate","computeVertexNormals","paths","material","vertexColors","positions","colors","xC","yC","Count","route","j","k","xPro","yPro","MercatorProjection","setAttribute","computeBoundingSphere","line","add","light","indices","floor","setIndex"],"sourceRoot":""}