"use strict";(self.webpackChunkdata_in_design=self.webpackChunkdata_in_design||[]).push([[113],{4081:(t,e,i)=>{i.d(e,{A:()=>x});var l,n=i(35143),s=i(50076),o=i(42553),r=i(53084),a=i(76460),h=i(30726),c=i(46053),u=i(21403),f=i(85842);class p{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this.minValue=t,this.maxValue=e,this.noDataValue=i}}let d=l=class extends o.oY{constructor(t){super(t),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.statistics=null}static createEmptyBand(t,e){return new(l.getPixelArrayConstructor(t))(e)}static getPixelArrayConstructor(t){let e;switch(t){case"u1":case"u2":case"u4":case"u8":e=Uint8Array;break;case"u16":e=Uint16Array;break;case"u32":e=Uint32Array;break;case"s8":e=Int8Array;break;case"s16":e=Int16Array;break;case"s32":e=Int32Array;break;case"f32":case"c64":case"c128":case"unknown":e=Float32Array;break;case"f64":e=Float64Array}return e}castPixelType(t){if(!t)return"f32";let e=t.toLowerCase();return["u1","u2","u4"].includes(e)?e="u8":["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].includes(e)||(e="f32"),e}getPlaneCount(){var t;return null===(t=this.pixels)||void 0===t?void 0:t.length}addData(t){var e;if(!t.pixels||t.pixels.length!==this.width*this.height)throw new s.A("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(null!==(e=t.statistics)&&void 0!==e?e:new p)}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t)}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){if(!this.pixels)return;this.statistics=this.pixels.map((t=>this._calculateBandStatistics(t,this.mask)));const t=this.mask;let e=0;if((0,h.Ru)(t))for(let i=0;i<t.length;i++)t[i]&&e++;else e=this.width*this.height;this.validPixelCount=e}clamp(t){if(!t||"f64"===t||"f32"===t||!this.pixels)return;let e;switch(t){case"u8":e=[0,255];break;case"u16":e=[0,65535];break;case"u32":e=[0,4294967295];break;case"s8":e=[-128,127];break;case"s16":e=[-32768,32767];break;case"s32":e=[-2147483648,2147483647];break;default:e=[-34e38,34e38]}const[i,n]=e,s=this.pixels,o=this.width*this.height,r=s.length;let a,h,c;const u=[];for(let f=0;f<r;f++){c=l.createEmptyBand(t,o),a=s[f];for(let t=0;t<o;t++)h=a[t],c[t]=h>n?n:h<i?i:h;u.push(c)}this.pixels=u,this.pixelType=t}extractBands(t){const{pixels:e,statistics:i}=this;if((0,h.$I)(t)||0===t.length||!e||0===e.length)return this;const n=e.length,s=t.some((t=>t>=e.length)),o=n===t.length&&!t.some(((t,e)=>t!==e));return s||o?this:new l({pixelType:this.pixelType,width:this.width,height:this.height,mask:this.mask,validPixelCount:this.validPixelCount,maskIsAlpha:this.maskIsAlpha,pixels:t.map((t=>e[t])),statistics:i&&t.map((t=>i[t]))})}clone(){const t=new l({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount});let e;(0,h.Ru)(this.mask)&&(this.mask instanceof Uint8Array?t.mask=new Uint8Array(this.mask):t.mask=this.mask.slice(0));const i=l.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const l=!!this.pixels[0].slice;for(e=0;e<this.pixels.length;e++)t.pixels[e]=l?this.pixels[e].slice(0,this.pixels[e].length):new i(this.pixels[e])}if(this.statistics)for(t.statistics=[],e=0;e<this.statistics.length;e++)t.statistics[e]=(0,r.o8)(this.statistics[e]);return t}_fillFrom8Bit(t){const{mask:e,maskIsAlpha:i,pixels:l}=this;if(!t||!l||!l.length)return void a.A.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let n,s,o,r;n=s=o=l[0],l.length>=3?(s=l[1],o=l[2]):2===l.length&&(s=l[1]);const c=new Uint32Array(t),u=this.width*this.height;if(n.length===u)if((0,h.Ru)(e)&&e.length===u)if(i)for(r=0;r<u;r++)e[r]&&(c[r]=e[r]<<24|o[r]<<16|s[r]<<8|n[r]);else for(r=0;r<u;r++)e[r]&&(c[r]=255<<24|o[r]<<16|s[r]<<8|n[r]);else for(r=0;r<u;r++)c[r]=255<<24|o[r]<<16|s[r]<<8|n[r];else a.A.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.")}_fillFromNon8Bit(t){const{pixels:e,mask:i,statistics:l}=this;if(!t||!e||!e.length)return void a.A.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const n=this.pixelType;let s=1,o=0,r=1;if(l&&l.length>0){for(const t of l)if(null!=t.minValue&&(o=Math.min(o,t.minValue)),null!=t.maxValue&&null!=t.minValue){const e=t.maxValue-t.minValue;r=Math.max(r,e)}s=255/r}else{let t=255;"s8"===n?(o=-128,t=127):"u16"===n?t=65535:"s16"===n?(o=-32768,t=32767):"u32"===n?t=4294967295:"s32"===n?(o=-2147483648,t=2147483647):"f32"===n?(o=-34e38,t=34e38):"f64"===n&&(o=-Number.MAX_VALUE,t=Number.MAX_VALUE),s=255/(t-o)}const c=new Uint32Array(t),u=this.width*this.height;let f,p,d,x,g;if(f=p=d=e[0],f.length!==u)return a.A.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(e.length>=2)if(p=e[1],e.length>=3&&(d=e[2]),(0,h.Ru)(i)&&i.length===u)for(x=0;x<u;x++)i[x]&&(c[x]=255<<24|(d[x]-o)*s<<16|(p[x]-o)*s<<8|(f[x]-o)*s);else for(x=0;x<u;x++)c[x]=255<<24|(d[x]-o)*s<<16|(p[x]-o)*s<<8|(f[x]-o)*s;else if((0,h.Ru)(i)&&i.length===u)for(x=0;x<u;x++)g=(f[x]-o)*s,i[x]&&(c[x]=255<<24|g<<16|g<<8|g);else for(x=0;x<u;x++)g=(f[x]-o)*s,c[x]=255<<24|g<<16|g<<8|g}_fillFrom32Bit(t){const{pixels:e,mask:i}=this;if(!t||!e||!e.length)return a.A.getLogger(this.declaredClass).error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let l,n,s,o;l=n=s=e[0],e.length>=3?(n=e[1],s=e[2]):2===e.length&&(n=e[1]);const r=this.width*this.height;if(l.length!==r)return a.A.getLogger(this.declaredClass).error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let c=0;if((0,h.Ru)(i)&&i.length===r)for(o=0;o<r;o++)t[c++]=l[o],t[c++]=n[o],t[c++]=s[o],t[c++]=1&i[o];else for(o=0;o<r;o++)t[c++]=l[o],t[c++]=n[o],t[c++]=s[o],t[c++]=1}_calculateBandStatistics(t,e){let i=1/0,l=-1/0;const n=t.length;let s,o=0;if((0,h.Ru)(e))for(s=0;s<n;s++)e[s]&&(o=t[s],i=o<i?o:i,l=o>l?o:l);else for(s=0;s<n;s++)o=t[s],i=o<i?o:i,l=o>l?o:l;return new p(i,l)}};(0,n._)([(0,c.MZ)({json:{write:!0}})],d.prototype,"width",void 0),(0,n._)([(0,c.MZ)({json:{write:!0}})],d.prototype,"height",void 0),(0,n._)([(0,c.MZ)({json:{write:!0}})],d.prototype,"pixelType",void 0),(0,n._)([(0,u.w)("pixelType")],d.prototype,"castPixelType",null),(0,n._)([(0,c.MZ)({json:{write:!0}})],d.prototype,"validPixelCount",void 0),(0,n._)([(0,c.MZ)({json:{write:!0}})],d.prototype,"mask",void 0),(0,n._)([(0,c.MZ)({json:{write:!0}})],d.prototype,"maskIsAlpha",void 0),(0,n._)([(0,c.MZ)({json:{write:!0}})],d.prototype,"pixels",void 0),(0,n._)([(0,c.MZ)({json:{write:!0}})],d.prototype,"statistics",void 0),d=l=(0,n._)([(0,f.$)("esri.layers.support.PixelBlock")],d);const x=d},52494:(t,e,i)=>{i.d(e,{$i:()=>E,AB:()=>a,Ew:()=>g,Hx:()=>x,IB:()=>l,LY:()=>M,QF:()=>G,Wb:()=>n,Wt:()=>v,Wy:()=>c,XU:()=>k,_B:()=>h,dK:()=>A,eH:()=>p,lD:()=>S,qL:()=>f,z$:()=>T,z7:()=>B,zg:()=>u});var l,n,s,o=i(30726),r=i(4081);function a(t){return(0,o.Ru)(t)&&"esri.layers.support.PixelBlock"===t.declaredClass&&t.pixels&&t.pixels.length>0}function h(t,e){if(null===e||void 0===e||!e.length||!a(t))return t;const i=t.pixels.length;return e&&e.some((t=>t>=i))||1===i&&1===e.length&&0===e[0]?t:i!==e.length||e.some(((t,e)=>t!==e))?new r.A({pixelType:t.pixelType,width:t.width,height:t.height,mask:t.mask,validPixelCount:t.validPixelCount,maskIsAlpha:t.maskIsAlpha,pixels:e.map((e=>t.pixels[e])),statistics:t.statistics&&e.map((e=>t.statistics[e]))}):t}function c(t){if(null===t||void 0===t||!t.length||t.some((t=>!a(t))))return null;if(1===t.length)return(0,o.Ru)(t[0])?t[0].clone():null;const e=t,{width:i,height:l,pixelType:n}=e[0];if(e.some((t=>t.width!==i||t.height!==l)))return null;const s=e.map((t=>{let{mask:e}=t;return e})).filter((t=>null!=t));let h=null;s.length&&(h=new Uint8Array(i*l),h.set(s[0]),s.length>1&&w(s.slice(1),h));const c=[];e.forEach((t=>{let{pixels:e}=t;return c.push(...e)}));const u=e.map((t=>{let{statistics:e}=t;return e})).filter((t=>null===t||void 0===t?void 0:t.length)),f=[];return u.forEach((t=>f.push(...t))),new r.A({pixelType:n,width:i,height:l,mask:h,pixels:c,statistics:f.length?f:null})}function u(t){if(!t)return;const e=t.colormap;if(!e||0===e.length)return;const i=e.sort(((t,e)=>t[0]-e[0]));let l=0;i[0][0]<0&&(l=i[0][0]);const n=Math.max(256,i[i.length-1][0]-l+1),s=new Uint8Array(4*n),o=[];let r,a=0,h=0;const c=5===i[0].length;if(n>65536)return i.forEach((t=>{o[t[0]-l]=c?t.slice(1):t.slice(1).concat([255])})),{indexed2DColormap:o,offset:l,alphaSpecified:c};if(t.fillUnspecified)for(r=i[h],a=r[0]-l;a<n;a++)s[4*a]=r[1],s[4*a+1]=r[2],s[4*a+2]=r[3],s[4*a+3]=c?r[4]:255,a===r[0]-l&&(r=h===i.length-1?r:i[++h]);else for(a=0;a<i.length;a++)r=i[a],h=4*(r[0]-l),s[h]=r[1],s[h+1]=r[2],s[h+2]=r[3],s[h+3]=c?r[4]:255;return{indexedColormap:s,offset:l,alphaSpecified:c}}function f(t,e){if(!a(t))return t;if(!e||!e.indexedColormap&&!e.indexed2DColormap)return t;const i=t.clone(),l=i.pixels;let n=i.mask;const s=i.width*i.height;if(1!==l.length)return t;const{indexedColormap:r,indexed2DColormap:h,offset:c,alphaSpecified:u}=e;let f=0;const p=l[0],d=new Uint8Array(p.length),x=new Uint8Array(p.length),g=new Uint8Array(p.length);let m,y=0;if(r){const t=r.length-1;if((0,o.Ru)(n))for(f=0;f<s;f++)n[f]&&(y=4*(p[f]-c),y<c||y>t?n[f]=0:(d[f]=r[y],x[f]=r[y+1],g[f]=r[y+2],n[f]=r[y+3]));else{for(n=new Uint8Array(s),f=0;f<s;f++)y=4*(p[f]-c),y<c||y>t?n[f]=0:(d[f]=r[y],x[f]=r[y+1],g[f]=r[y+2],n[f]=r[y+3]);i.mask=n}}else if(h)if((0,o.Ru)(n))for(f=0;f<s;f++)n[f]&&(m=h[p[f]],d[f]=m[0],x[f]=m[1],g[f]=m[2],n[f]=m[3]);else{for(n=new Uint8Array(s),f=0;f<s;f++)m=h[p[f]],d[f]=m[0],x[f]=m[1],g[f]=m[2],n[f]=m[3];i.mask=n}return i.pixels=[d,x,g],i.statistics=null,i.pixelType="u8",i.maskIsAlpha=u,i}function p(t,e){if(!a(t))return null;const{pixels:i,mask:l}=t,n=i.length;let s=e.lut;const{offset:o}=e;s&&1===s[0].length&&(s=i.map((()=>s)));const h=[],c=e.outputPixelType||"u8";for(let r=0;r<n;r++){const t=d(i[r],l,s[r],o||0,c);h.push(t)}const u=new r.A({width:t.width,height:t.height,pixels:h,mask:l,pixelType:c});return u.updateStatistics(),u}function d(t,e,i,l,n){const s=t.length,o=r.A.createEmptyBand(n,s);if(e)for(let r=0;r<s;r++)e[r]&&(o[r]=i[t[r]-l]);else for(let r=0;r<s;r++)o[r]=i[t[r]-l];return o}function x(t,e){if(!a(t))return null;const i=t.clone(),{pixels:l}=i,n=i.width*i.height,s=e.length,o=Math.floor(s/2),r=e[Math.floor(o)],h=l[0];let c,u,f,p,d,x,g=!1;const m=new Uint8Array(n),y=new Uint8Array(n),w=new Uint8Array(n);let A=i.mask;const k=4===e[0].mappedColor.length;for(A||(A=new Uint8Array(n),A.fill(k?255:1),i.mask=A),d=0;d<n;d++)if(A[d]){for(c=h[d],g=!1,x=o,u=r,f=0,p=s-1;p-f>1;){if(c===u.value){g=!0;break}c>u.value?f=x:p=x,x=Math.floor((f+p)/2),u=e[Math.floor(x)]}g||(c===e[f].value?(u=e[f],g=!0):c===e[p].value?(u=e[p],g=!0):c<e[f].value?(g=!1,u=null):c>e[f].value&&(c<e[p].value?(u=e[f],g=!0):p===s-1?(g=!1,u=null):(u=e[p],g=!0))),g?(m[d]=u.mappedColor[0],y[d]=u.mappedColor[1],w[d]=u.mappedColor[2],A[d]=u.mappedColor[3]):m[d]=y[d]=w[d]=A[d]=0}return i.pixels=[m,y,w],i.mask=A,i.pixelType="u8",i.maskIsAlpha=k,i}function g(t,e){if(!a(t))return null;const{width:i,height:l}=t,{inputRanges:n,outputValues:s,outputPixelType:o,noDataRanges:h,allowUnmatched:c}=e,u=t.pixels[0],f=r.A.createEmptyBand(o,u.length);c&&f.set(u);const p=t.mask,d=n.length/2;for(let r=0;r<l;r++)for(let t=0;t<i;t++){const e=r*i+t;if(!p||p[e]){const t=u[e];for(let i=d-1;i>=0;i--)if(t>=n[2*i]&&t<=n[2*i+1]){f[e]=s[i];break}}}let x=p;if(null!==h&&void 0!==h&&h.length){x=new Uint8Array(i*l),p&&x.set(p);for(let t=0;t<l;t++)for(let e=0;e<i;e++){const l=t*i+e;if(!p||p[l]){const t=u[l];for(let e=0;e<d;e+=2)if(t>=h[e]&&t<=h[e+1]){f[l]=0,x[l]=0;break}}}}return new r.A({width:i,height:l,pixelType:o,pixels:[f],mask:x})}function m(t,e,i,l){const n=null!=i&&i.length>=2?new Set(i):null,s=1===(null===i||void 0===i?void 0:i.length)?i[0]:null,o=!(null===e||void 0===e||!e.length);for(let r=0;r<t.length;r++)if(l[r]){const i=t[r];if(o){let t=!1;for(let l=0;l<e.length;l+=2)if(i>=e[l]&&i<=e[l+1]){t=!0;break}t||(l[r]=0)}l[r]&&(i===s||(null===n||void 0===n?void 0:n.has(i)))&&(l[r]=0)}}function y(t,e){const i=t[0].length;for(let l=0;l<i;l++)if(e[l]){let i=!1;for(let e=0;e<t.length;e++)if(t[e][l]){i=!0;break}i||(e[l]=0)}}function w(t,e){const i=t[0].length;for(let l=0;l<i;l++)if(e[l]){let i=!1;for(let e=0;e<t.length;e++)if(0===t[e][l]){i=!0;break}i&&(e[l]=0)}}function A(t,e){if(!a(t))return null;const{width:i,height:l,pixels:n}=t,s=i*l,o=new Uint8Array(s);t.mask?o.set(t.mask):o.fill(255);const h=n.length,{includedRanges:c,noDataValues:u,outputPixelType:f,matchAll:p,lookup:x}=e;if(x){const t=[];for(let e=0;e<h;e++){const i=d(n[e],o,x.lut,x.offset||0,"u8");t.push(i)}1===t.length?o.set(t[0]):p?y(t,o):w(t,o)}else if(p){const t=[];for(let e=0;e<h;e++){const i=new Uint8Array(s);i.set(o),m(n[e],c,u,i),t.push(i)}1===t.length?o.set(t[0]):y(t,o)}else for(let r=0;r<h;r++)m(n[r],c,u,o);return new r.A({width:i,height:l,pixelType:f,pixels:n,mask:o})}function k(t,e,i){if("u8"!==t&&"s8"!==t&&"u16"!==t&&"s16"!==t)return null;const l=t.includes("16")?65536:256,n=t.includes("s")?-l/2:0,s=r.A.createEmptyBand(t,l);for(let o=0;o<e.length;o++){const t=i[o],l=Math.ceil(e[2*o]-n),r=Math.floor(e[2*o+1]-n);for(let e=l;e<=r;e++)s[e]=t}return{lut:s,offset:n}}function v(t,e,i){if("u8"!==t&&"s8"!==t&&"u16"!==t&&"s16"!==t)return null;const l=t.includes("16")?65536:256,n=t.includes("s")?-l/2:0,s=new Uint8Array(l);if(e)for(let o=0;o<e.length;o++){const t=Math.ceil(e[2*o]-n),i=Math.floor(e[2*o+1]-n);for(let e=t;e<=i;e++)s[e]=255}if(i)for(let o=0;o<i.length;o++)s[i[o]-n]=0;return{lut:s,offset:n}}function M(t,e){if(!t||0===t.length)return null;const i=t.find((t=>t.pixelBlock));if(!i||(0,o.$I)(i.pixelBlock))return null;const l=(i.extent.xmax-i.extent.xmin)/i.pixelBlock.width,n=(i.extent.ymax-i.extent.ymin)/i.pixelBlock.height,s=.01*Math.min(l,n),r=t.sort(((t,e)=>Math.abs(t.extent.ymax-e.extent.ymax)>s?e.extent.ymax-t.extent.ymax:Math.abs(t.extent.xmin-e.extent.xmin)>s?t.extent.xmin-e.extent.xmin:0)),a=Math.min.apply(null,r.map((t=>t.extent.xmin))),h=Math.min.apply(null,r.map((t=>t.extent.ymin))),c=Math.max.apply(null,r.map((t=>t.extent.xmax))),u=Math.max.apply(null,r.map((t=>t.extent.ymax))),f={x:Math.round((e.xmin-a)/l),y:Math.round((u-e.ymax)/n)},p={width:Math.round((c-a)/l),height:Math.round((u-h)/n)},d={width:Math.round((e.xmax-e.xmin)/l),height:Math.round((e.ymax-e.ymin)/n)};return Math.round(p.width/i.pixelBlock.width)*Math.round(p.height/i.pixelBlock.height)!==r.length||f.x<0||f.y<0||p.width<d.width||p.height<d.height?null:{extent:e,pixelBlock:B(r.map((t=>t.pixelBlock)),p,{clipOffset:f,clipSize:d})}}function b(t,e,i,l,n,s){const{width:o,height:r}=i.block,{x:a,y:h}=i.offset,{width:c,height:u}=i.mosaic,f=function(t,e,i,l,n,s,o,r){return{xmin:n<=i*t?0:n<i*t+t?n-i*t:t,ymin:s<=l*e?0:s<l*e+e?s-l*e:e,xmax:n+o<=i*t?0:n+o<i*t+t?n+o-i*t:t,ymax:s+r<=l*e?0:s+r<l*e+e?s+r-l*e:e}}(o,r,l,n,a,h,c,u);let p=0,d=0;if(s){var x;const t=s.hasGCSSShiftTransform?360:null!==(x=s.halfWorldWidth)&&void 0!==x?x:0,e=o*s.resolutionX,i=s.startX+l*e;i<t&&i+e>t?d=s.rightPadding:i>=t&&(p=s.leftMargin-s.rightPadding,d=0)}if(f.xmax-=d,"number"!=typeof e)for(let g=f.ymin;g<f.ymax;g++){const i=(n*r+g-h)*c+(l*o-a)+p,s=g*o;for(let l=f.xmin;l<f.xmax;l++)t[i+l]=e[s+l]}else for(let g=f.ymin;g<f.ymax;g++){const i=(n*r+g-h)*c+(l*o-a)+p;for(let l=f.xmin;l<f.xmax;l++)t[i+l]=e}}function B(t,e){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const{clipOffset:l,clipSize:n,alignmentInfo:s,blockWidths:h}=i;if(h)return function(t,e,i){const l=t.find((t=>(0,o.Ru)(t)));if((0,o.$I)(l))return null;const n=t.some((t=>!(0,o.Ru)(t)||!!t.mask)),{width:s,height:h}=e,c=n?new Uint8Array(s*h):null,{blockWidths:u}=i,f=[],p=l.getPlaneCount(),d=r.A.getPixelArrayConstructor(l.pixelType);if(n)for(let r=0,g=0;r<t.length;g+=u[r],r++){const e=t[r];if(!a(e))continue;const i=(0,o.oA)(e.mask);for(let t=0;t<h;t++)for(let l=0;l<u[r];l++)c[t*s+l+g]=null==i?255:i[t*e.width+l]}for(let o=0;o<p;o++){const e=new d(s*h);for(let i=0,l=0;i<t.length;l+=u[i],i++){const n=t[i];if(!a(n))continue;const r=n.pixels[o];if(null!=r)for(let t=0;t<h;t++)for(let o=0;o<u[i];o++)e[t*s+o+l]=r[t*n.width+o]}f.push(e)}const x=new r.A({width:s,height:h,mask:c,pixels:f,pixelType:l.pixelType});return x.updateStatistics(),x}(t,e,{blockWidths:h});const c=t.find((t=>a(t)));if((0,o.$I)(c))return null;const u=n?n.width:e.width,f=n?n.height:e.height,p=c.width,d=c.height,x=e.width/p,g=e.height/d,m={offset:l||{x:0,y:0},mosaic:n||e,block:{width:p,height:d}},y=c.pixelType,w=r.A.getPixelArrayConstructor(y),A=c.pixels.length,k=[];let v,M,B;for(let o=0;o<A;o++){M=new w(u*f);for(let e=0;e<g;e++)for(let i=0;i<x;i++){const l=t[e*x+i];a(l)&&(v=l.pixels[o],b(M,v,m,i,e,s))}k.push(M)}if(t.some((t=>(0,o.$I)(t)||(0,o.Ru)(t.mask)&&t.mask.length>0))){B=new Uint8Array(u*f);for(let e=0;e<g;e++)for(let i=0;i<x;i++){const l=t[e*x+i],n=(0,o.Ru)(l)?l.mask:null;(0,o.Ru)(n)?b(B,n,m,i,e,s):b(B,l?1:0,m,i,e,s)}}const T=new r.A({width:u,height:f,pixels:k,pixelType:y,mask:B});return T.updateStatistics(),T}function T(t,e,i){if(!a(t))return null;const{width:l,height:n}=t,s=e.x,o=e.y,r=i.width+s,h=i.height+o;if(s<0||o<0||r>l||h>n)return t;if(0===s&&0===o&&r===l&&h===n)return t;t.mask||(t.mask=new Uint8Array(l*n));const c=t.mask;for(let a=0;a<n;a++){const t=a*l;for(let e=0;e<l;e++)c[t+e]=a<o||a>=h||e<s||e>=r?0:1}return t.updateStatistics(),t}function U(t){if(!a(t))return null;const e=t.clone(),{width:i,height:l,pixels:n}=t,s=n[0],r=e.pixels[0],h=(0,o.oA)(t.mask);for(let o=2;o<l-1;o++){const t=new Map;for(let l=o-2;l<o+2;l++)for(let e=0;e<4;e++){const n=l*i+e;_(t,s[n],h?h[n]:1)}r[o*i]=C(t),r[o*i+1]=r[o*i+2]=r[o*i];let e=3;for(;e<i-1;e++){let l=(o-2)*i+e+1;_(t,s[l],h?h[l]:1),l=(o-1)*i+e+1,_(t,s[l],h?h[l]:1),l=o*i+e+1,_(t,s[l],h?h[l]:1),l=(o+1)*i+e+1,_(t,s[l],h?h[l]:1),l=(o-2)*i+e-3,R(t,s[l],h?h[l]:1),l=(o-1)*i+e-3,R(t,s[l],h?h[l]:1),l=o*i+e-3,R(t,s[l],h?h[l]:1),l=(o+1)*i+e-3,R(t,s[l],h?h[l]:1),r[o*i+e]=C(t)}r[o*i+e+1]=r[o*i+e]}for(let o=0;o<i;o++)r[o]=r[i+o]=r[2*i+o],r[(l-1)*i+o]=r[(l-2)*i+o];return e.updateStatistics(),e}function C(t){if(0===t.size)return 0;let e=0,i=-1,l=0;const n=t.keys();let s=n.next();for(;!s.done;)l=t.get(s.value),l>e&&(i=s.value,e=l),s=n.next();return i}function R(t,e,i){if(0===i)return;const l=t.get(e);1===l?t.delete(e):t.set(e,l-1)}function _(t,e,i){0!==i&&t.set(e,t.has(e)?t.get(e)+1:1)}function P(t,e,i){let{x:l,y:n}=e;const{width:s,height:h}=i;if(0===l&&0===n&&h===t.height&&s===t.width)return t;const{width:c,height:u}=t,f=Math.max(0,n),p=Math.max(0,l),d=Math.min(l+s,c),x=Math.min(n+h,u);if(d<0||x<0||!a(t))return null;l=Math.max(0,-l),n=Math.max(0,-n);const{pixels:g}=t,m=s*h,y=g.length,w=[];for(let o=0;o<y;o++){const e=g[o],i=r.A.createEmptyBand(t.pixelType,m);for(let t=f;t<x;t++){const o=t*c;let r=(t+n-f)*s+l;for(let t=p;t<d;t++)i[r++]=e[o+t]}w.push(i)}const A=new Uint8Array(m),k=(0,o.oA)(t.mask);for(let o=f;o<x;o++){const t=o*c;let e=(o+n-f)*s+l;for(let i=p;i<d;i++)A[e++]=k?k[t+i]:1}const v=new r.A({width:i.width,height:i.height,pixelType:t.pixelType,pixels:w,mask:A});return v.updateStatistics(),v}function I(t){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];if(!a(t))return null;const{pixels:i,width:l,height:n,mask:s,pixelType:h}=t,c=[],u=Math.round(l/2),f=Math.round(n/2),p=n-1,d=l-1;for(let o=0;o<i.length;o++){const t=i[o],s=r.A.createEmptyBand(h,u*f);let a=0;for(let i=0;i<n;i+=2)for(let n=0;n<l;n+=2){const o=t[i*l+n];if(e){const e=n===d?o:t[i*l+n+1],r=i===p?o:t[i*l+n+l],h=n===d?r:i===p?e:t[i*l+n+l+1];s[a++]=(o+e+r+h)/4}else s[a++]=o}c.push(s)}let x=null;if((0,o.Ru)(s)){x=new Uint8Array(u*f);let t=0;for(let i=0;i<n;i+=2)for(let n=0;n<l;n+=2){const o=s[i*l+n];if(e){const e=n===d?o:s[i*l+n+1],r=i===p?o:s[i*l+n+l],a=n===d?r:i===p?e:s[i*l+n+l+1];x[t++]=o*e*r*a?1:0}else x[t++]=o}}return new r.A({width:u,height:f,pixelType:h,pixels:c,mask:x})}function S(t,e,i){if(!a(t))return null;const{width:l,height:n}=e;let{width:s,height:o}=t;const r=new Map,h={x:0,y:0},c=null==i?1:1+i;let u=t;for(let a=0;a<c;a++){const t=Math.ceil(s/l),i=Math.ceil(o/n);for(let s=0;s<i;s++){h.y=s*n;for(let i=0;i<t;i++){h.x=i*l;const t=P(u,h,e);r.set("".concat(a,"/").concat(s,"/").concat(i),t)}}a<c-1&&(u=I(u)),s=Math.round(s/2),o=Math.round(o/2)}return r}function F(t,e,i,l){let n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.5;const{width:s,height:o}=t,{width:r,height:a}=e,h=l.cols,c=l.rows,u=Math.ceil(r/h-.1/h),f=Math.ceil(a/c-.1/c);let p,d,x,g,m,y,w;const A=u*h,k=A*f*c,v=new Float32Array(k),M=new Float32Array(k),b=new Uint32Array(k),B=new Uint32Array(k);let T,U,C=0;for(let R=0;R<f;R++)for(let t=0;t<u;t++){p=12*(R*u+t),d=i[p],x=i[p+1],g=i[p+2],m=i[p+3],y=i[p+4],w=i[p+5];for(let e=0;e<c;e++){C=(R*c+e)*A+t*h,U=(e+.5)/c;for(let t=0;t<e;t++)T=(t+.5)/h,v[C+t]=(d*T+x*U+g)*s-n,M[C+t]=(m*T+y*U+w)*o-n,b[C+t]=Math.round(v[C+t]),B[C+t]=Math.round(M[C+t])}p+=6,d=i[p],x=i[p+1],g=i[p+2],m=i[p+3],y=i[p+4],w=i[p+5];for(let e=0;e<c;e++){C=(R*c+e)*A+t*h,U=(e+.5)/c;for(let t=e;t<h;t++)T=(t+.5)/h,v[C+t]=(d*T+x*U+g)*s-n,M[C+t]=(m*T+y*U+w)*o-n,b[C+t]=Math.round(v[C+t]),B[C+t]=Math.round(M[C+t])}}return{offsets_x:v,offsets_y:M,offsets_xi:b,offsets_yi:B,gridWidth:A}}function G(t,e){const{coefficients:i,spacing:l}=e,{offsets_x:n,offsets_y:s,gridWidth:o}=F(t,t,i,{rows:l[0],cols:l[1]},.5),{width:r,height:a}=t,h=new Float32Array(r*a),c=180/Math.PI;for(let u=0;u<a;u++)for(let t=0;t<r;t++){const e=u*o+t,i=0===u?e:e-o,l=u===a-1?e:e+o,f=n[i]-n[l],p=s[l]-s[i];if(isNaN(f)||isNaN(p))h[u*r+t]=90;else{let e=Math.atan2(p,f)*c;e=(360+e)%360,h[u*r+t]=e}}return h}function E(t,e,i,l){let n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"nearest";if(!a(t))return null;"majority"===n&&(t=U(t));const{pixels:s,mask:h,pixelType:c}=t,u=t.width,f=t.height,p=r.A.getPixelArrayConstructor(c),d=s.length,{width:x,height:g}=e;let m=!1;for(let o=0;o<i.length;o+=3)-1===i[o]&&-1===i[o+1]&&-1===i[o+2]&&(m=!0);const{offsets_x:y,offsets_y:w,offsets_xi:A,offsets_yi:k,gridWidth:v}=F({width:u,height:f},e,i,l,"majority"===n?0:.5);let M;const b=(t,e,i)=>{const l=t instanceof Float32Array||t instanceof Float64Array?0:.5;for(let n=0;n<g;n++){M=n*v;for(let s=0;s<x;s++){if(y[M]<0||w[M]<0)t[n*x+s]=0;else if(i)t[n*x+s]=e[A[M]+k[M]*u];else{const i=Math.floor(y[M]),o=Math.floor(w[M]),r=Math.ceil(y[M]),a=Math.ceil(w[M]),c=y[M]-i,f=w[M]-o;if(!h||h[i+o*u]&&h[i+o*u]&&h[i+a*u]&&h[r+a*u]){const h=(1-c)*e[i+o*u]+c*e[r+o*u],p=(1-c)*e[i+a*u]+c*e[r+a*u];t[n*x+s]=(1-f)*h+f*p+l}else t[n*x+s]=e[A[M]+k[M]*u]}M++}}},B=[];let T;for(let o=0;o<d;o++)T=new p(x*g),b(T,s[o],"nearest"===n||"majority"===n),B.push(T);const C=new r.A({width:x,height:g,pixelType:c,pixels:B});if((0,o.Ru)(h))C.mask=new Uint8Array(x*g),b(C.mask,h,!0);else if(m){C.mask=new Uint8Array(x*g);for(let t=0;t<x*g;t++)C.mask[t]=y[t]<0||w[t]<0?0:1}return C.updateStatistics(),C}(s=l||(l={}))[s.matchAny=0]="matchAny",s[s.matchAll=1]="matchAll",function(t){t[t.bestMatch=0]="bestMatch",t[t.fail=1]="fail"}(n||(n={}))}}]);
//# sourceMappingURL=113.2eaeff3d.chunk.js.map